{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*!\n\n=========================================================\n* NextJS Argon Dashboard PRO - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/nextjs-argon-dashboard-pro\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classnames from \"classnames\"; // JavaScript library that creates a callendar with events\n\nimport { Calendar } from \"@fullcalendar/core\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interaction from \"@fullcalendar/interaction\"; // react component used to create sweet alerts\n\nimport ReactBSAlert from \"react-bootstrap-sweetalert\"; // reactstrap components\n\nimport { Button, ButtonGroup, Card, CardHeader, CardBody, FormGroup, Form, Input, Modal, Container, Row, Col, Breadcrumb, BreadcrumbItem } from \"reactstrap\"; // layout for this page\n\nimport Admin from \"layouts/Admin.js\"; // core components\n\nimport { events as eventsVariables } from \"variables/general.js\";\nlet calendar;\n\nfunction CalendarView() {\n  const [events, setEvents] = React.useState(eventsVariables);\n  const [alert, setAlert] = React.useState(null);\n  const [modalAdd, setModalAdd] = React.useState(false);\n  const [modalChange, setModalChange] = React.useState(false);\n  const [startDate, setStartDate] = React.useState(null);\n  const [endDate, setEndDate] = React.useState(null);\n  const [radios, setRadios] = React.useState(null);\n  const [eventId, setEventId] = React.useState(null);\n  const [eventTitle, setEventTitle] = React.useState(null);\n  const [eventDescription, setEventDescription] = React.useState(null); // eslint-disable-next-line\n\n  const [event, setEvent] = React.useState(null);\n  const [currentDate, setCurrentDate] = React.useState(null);\n  const calendarRef = React.useRef(null);\n  React.useEffect(() => {\n    createCalendar(); // eslint-disable-next-line\n  }, []);\n\n  const createCalendar = () => {\n    calendar = new Calendar(calendarRef.current, {\n      plugins: [interaction, dayGridPlugin],\n      initialView: \"dayGridMonth\",\n      selectable: true,\n      editable: true,\n      events: events,\n      headerToolbar: \"\",\n      // Add new event\n      select: info => {\n        setModalAdd(true);\n        setStartDate(info.startStr);\n        setEndDate(info.endStr);\n        setRadios(\"bg-info\");\n      },\n      // Edit calendar event action\n      eventClick: ({\n        event\n      }) => {\n        setEventId(event.id);\n        setEventTitle(event.title);\n        setEventDescription(event.extendedProps.description);\n        setRadios(\"bg-info\");\n        setEvent(event);\n        setModalChange(true);\n      }\n    });\n    calendar.render();\n    setCurrentDate(calendar.view.title);\n  };\n\n  const changeView = newView => {\n    calendar.changeView(newView);\n    setCurrentDate(calendar.view.title);\n  };\n\n  const addNewEvent = () => {\n    var newEvents = events;\n    newEvents.push({\n      title: eventTitle,\n      start: startDate,\n      end: endDate,\n      className: radios,\n      id: events[events.length - 1] + 1\n    });\n    calendar.addEvent({\n      title: eventTitle,\n      start: startDate,\n      end: endDate,\n      className: radios,\n      id: events[events.length - 1] + 1\n    });\n    setModalAdd(false);\n    setEvents(newEvents);\n    setStartDate(undefined);\n    setEndDate(undefined);\n    setRadios(\"bg-info\");\n    setEventTitle(undefined);\n  };\n\n  const changeEvent = () => {\n    var newEvents = events.map((prop, key) => {\n      if (prop.id + \"\" === eventId + \"\") {\n        setEvent(undefined);\n        calendar.getEventById(eventId).remove();\n\n        let saveNewEvent = _objectSpread(_objectSpread({}, prop), {}, {\n          title: eventTitle,\n          className: radios,\n          description: eventDescription\n        });\n\n        calendar.addEvent(saveNewEvent);\n        return _objectSpread(_objectSpread({}, prop), {}, {\n          title: eventTitle,\n          className: radios,\n          description: eventDescription\n        });\n      } else {\n        return prop;\n      }\n    });\n    setModalChange(false);\n    setEvents(newEvents);\n    setRadios(\"bg-info\");\n    setEventTitle(undefined);\n    setEventDescription(undefined);\n    setEventId(undefined);\n    setEvent(undefined);\n  };\n\n  const deleteEventSweetAlert = () => {\n    setAlert( /*#__PURE__*/_jsx(ReactBSAlert, {\n      warning: true,\n      style: {\n        display: \"block\",\n        marginTop: \"-100px\"\n      },\n      title: \"Are you sure?\",\n      onConfirm: () => {\n        setAlert(false);\n        setRadios(\"bg-info\");\n        setEventTitle(undefined);\n        setEventDescription(undefined);\n        setEventId(undefined);\n      },\n      onCancel: () => deleteEvent(),\n      confirmBtnCssClass: \"btn-secondary\",\n      cancelBtnBsStyle: \"danger\",\n      confirmBtnText: \"Cancel\",\n      cancelBtnText: \"Yes, delete it\",\n      showCancel: true,\n      btnSize: \"\",\n      children: \"You won't be able to revert this!\"\n    }));\n  };\n\n  const deleteEvent = () => {\n    var newEvents = events.filter(prop => prop.id + \"\" !== eventId);\n    setEvent(undefined);\n    setAlert( /*#__PURE__*/_jsx(ReactBSAlert, {\n      success: true,\n      style: {\n        display: \"block\",\n        marginTop: \"-100px\"\n      },\n      title: \"Success\",\n      onConfirm: () => setAlert(null),\n      onCancel: () => setAlert(null),\n      confirmBtnBsStyle: \"primary\",\n      confirmBtnText: \"Ok\",\n      btnSize: \"\",\n      children: \"A few words about this sweet alert ...\"\n    }));\n    setModalChange(false);\n    setEvents(newEvents);\n    setRadios(\"bg-info\");\n    setEventTitle(undefined);\n    setEventDescription(undefined);\n    setEventId(undefined);\n    setEvent(undefined);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [alert, /*#__PURE__*/_jsx(\"div\", {\n      className: \"header header-dark bg-dark pb-6 content__title content__title--calendar\",\n      children: /*#__PURE__*/_jsx(Container, {\n        fluid: true,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"header-body\",\n          children: /*#__PURE__*/_jsxs(Row, {\n            className: \"align-items-center py-4\",\n            children: [/*#__PURE__*/_jsxs(Col, {\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsx(\"h6\", {\n                className: \"fullcalendar-title h2 text-white d-inline-block mb-0 mr-1\",\n                children: currentDate\n              }), /*#__PURE__*/_jsxs(Breadcrumb, {\n                className: \"d-none d-md-inline-block ml-lg-4\",\n                listClassName: \"breadcrumb-links breadcrumb-dark\",\n                children: [/*#__PURE__*/_jsx(BreadcrumbItem, {\n                  children: /*#__PURE__*/_jsx(\"a\", {\n                    href: \"#pablo\",\n                    onClick: e => e.preventDefault(),\n                    children: /*#__PURE__*/_jsx(\"i\", {\n                      className: \"fas fa-home\"\n                    })\n                  })\n                }), /*#__PURE__*/_jsx(BreadcrumbItem, {\n                  children: /*#__PURE__*/_jsx(\"a\", {\n                    href: \"#pablo\",\n                    onClick: e => e.preventDefault(),\n                    children: \"Dashboard\"\n                  })\n                }), /*#__PURE__*/_jsx(BreadcrumbItem, {\n                  \"aria-current\": \"page\",\n                  className: \"active\",\n                  children: \"Calendar\"\n                })]\n              })]\n            }), /*#__PURE__*/_jsxs(Col, {\n              className: \"mt-3 mt-md-0 text-md-right\",\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsx(Button, {\n                className: \"fullcalendar-btn-prev btn-neutral\",\n                color: \"default\",\n                onClick: () => {\n                  calendar.next();\n                },\n                size: \"sm\",\n                children: /*#__PURE__*/_jsx(\"i\", {\n                  className: \"fas fa-angle-left\"\n                })\n              }), /*#__PURE__*/_jsx(Button, {\n                className: \"fullcalendar-btn-next btn-neutral\",\n                color: \"default\",\n                onClick: () => {\n                  calendar.prev();\n                },\n                size: \"sm\",\n                children: /*#__PURE__*/_jsx(\"i\", {\n                  className: \"fas fa-angle-right\"\n                })\n              }), /*#__PURE__*/_jsx(Button, {\n                className: \"btn-neutral\",\n                color: \"default\",\n                \"data-calendar-view\": \"month\",\n                onClick: () => changeView(\"dayGridMonth\"),\n                size: \"sm\",\n                children: \"Month\"\n              }), /*#__PURE__*/_jsx(Button, {\n                className: \"btn-neutral\",\n                color: \"default\",\n                \"data-calendar-view\": \"basicWeek\",\n                onClick: () => changeView(\"dayGridWeek\"),\n                size: \"sm\",\n                children: \"Week\"\n              }), /*#__PURE__*/_jsx(Button, {\n                className: \"btn-neutral\",\n                color: \"default\",\n                \"data-calendar-view\": \"basicDay\",\n                onClick: () => changeView(\"dayGridDay\"),\n                size: \"sm\",\n                children: \"Day\"\n              })]\n            })]\n          })\n        })\n      })\n    }), /*#__PURE__*/_jsx(Container, {\n      className: \"mt--6\",\n      fluid: true,\n      children: /*#__PURE__*/_jsx(Row, {\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxs(Card, {\n            className: \"card-calendar\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              children: /*#__PURE__*/_jsx(\"h5\", {\n                className: \"h3 mb-0\",\n                children: \"Calendar\"\n              })\n            }), /*#__PURE__*/_jsx(CardBody, {\n              className: \"p-0\",\n              children: /*#__PURE__*/_jsx(\"div\", {\n                className: \"calendar\",\n                \"data-toggle\": \"calendar\",\n                id: \"calendar\",\n                ref: calendarRef\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Modal, {\n            isOpen: modalAdd,\n            toggle: () => setModalAdd(false),\n            className: \"modal-dialog-centered modal-secondary\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"modal-body\",\n              children: /*#__PURE__*/_jsxs(\"form\", {\n                className: \"new-event--form\",\n                children: [/*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label\",\n                    children: \"Event title\"\n                  }), /*#__PURE__*/_jsx(Input, {\n                    className: \"form-control-alternative new-event--title\",\n                    placeholder: \"Event Title\",\n                    type: \"text\",\n                    onChange: e => setEventTitle(e.target.value)\n                  })]\n                }), /*#__PURE__*/_jsxs(FormGroup, {\n                  className: \"mb-0\",\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label d-block mb-3\",\n                    children: \"Status color\"\n                  }), /*#__PURE__*/_jsxs(ButtonGroup, {\n                    className: \"btn-group-toggle btn-group-colors event-tag\",\n                    \"data-toggle\": \"buttons\",\n                    children: [/*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-info\", {\n                        active: radios === \"bg-info\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-info\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-warning\", {\n                        active: radios === \"bg-warning\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-warning\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-danger\", {\n                        active: radios === \"bg-danger\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-danger\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-success\", {\n                        active: radios === \"bg-success\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-success\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-default\", {\n                        active: radios === \"bg-default\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-default\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-primary\", {\n                        active: radios === \"bg-primary\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-primary\")\n                    })]\n                  })]\n                })]\n              })\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"modal-footer\",\n              children: [/*#__PURE__*/_jsx(Button, {\n                className: \"new-event--add\",\n                color: \"primary\",\n                type: \"button\",\n                onClick: addNewEvent,\n                children: \"Add event\"\n              }), /*#__PURE__*/_jsx(Button, {\n                className: \"ml-auto\",\n                color: \"link\",\n                type: \"button\",\n                onClick: () => setModalAdd(false),\n                children: \"Close\"\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(Modal, {\n            isOpen: modalChange,\n            toggle: () => setModalChange(false),\n            className: \"modal-dialog-centered modal-secondary\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"modal-body\",\n              children: /*#__PURE__*/_jsxs(Form, {\n                className: \"edit-event--form\",\n                children: [/*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label\",\n                    children: \"Event title\"\n                  }), /*#__PURE__*/_jsx(Input, {\n                    className: \"form-control-alternative edit-event--title\",\n                    placeholder: \"Event Title\",\n                    type: \"text\",\n                    defaultValue: eventTitle,\n                    onChange: e => setEventTitle(e.target.value)\n                  })]\n                }), /*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label d-block mb-3\",\n                    children: \"Status color\"\n                  }), /*#__PURE__*/_jsxs(ButtonGroup, {\n                    className: \"btn-group-toggle btn-group-colors event-tag mb-0\",\n                    \"data-toggle\": \"buttons\",\n                    children: [/*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-info\", {\n                        active: radios === \"bg-info\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-info\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-warning\", {\n                        active: radios === \"bg-warning\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-warning\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-danger\", {\n                        active: radios === \"bg-danger\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-danger\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-success\", {\n                        active: radios === \"bg-success\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-success\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-default\", {\n                        active: radios === \"bg-default\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-default\")\n                    }), /*#__PURE__*/_jsx(Button, {\n                      className: classnames(\"bg-primary\", {\n                        active: radios === \"bg-primary\"\n                      }),\n                      color: \"\",\n                      type: \"button\",\n                      onClick: () => setRadios(\"bg-primary\")\n                    })]\n                  })]\n                }), /*#__PURE__*/_jsxs(FormGroup, {\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    className: \"form-control-label\",\n                    children: \"Description\"\n                  }), /*#__PURE__*/_jsx(Input, {\n                    className: \"form-control-alternative edit-event--description textarea-autosize\",\n                    placeholder: \"Event Desctiption\",\n                    type: \"textarea\",\n                    defaultValue: eventDescription,\n                    onChange: e => setEventDescription(e.target.value)\n                  }), /*#__PURE__*/_jsx(\"i\", {\n                    className: \"form-group--bar\"\n                  })]\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  className: \"edit-event--id\",\n                  type: \"hidden\"\n                })]\n              })\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"modal-footer\",\n              children: [/*#__PURE__*/_jsx(Button, {\n                color: \"primary\",\n                onClick: changeEvent,\n                children: \"Update\"\n              }), /*#__PURE__*/_jsx(Button, {\n                color: \"danger\",\n                onClick: () => {\n                  setModalChange(false);\n                  deleteEventSweetAlert();\n                },\n                children: \"Delete\"\n              }), /*#__PURE__*/_jsx(Button, {\n                className: \"ml-auto\",\n                color: \"link\",\n                onClick: () => setModalChange(false),\n                children: \"Close\"\n              })]\n            })]\n          })]\n        })\n      })\n    })]\n  });\n}\n\nCalendarView.layout = Admin;\nexport default CalendarView;","map":null,"metadata":{},"sourceType":"module"}