{"ast":null,"code":"import { __extends } from 'tslib';\nimport { Component, createElement, render, createRef, Fragment, options, createContext as createContext$1 } from 'preact';\nvar globalObj = typeof globalThis !== 'undefined' ? globalThis : window; // // TODO: streamline when killing IE11 support\n\nif (globalObj.FullCalendarVDom) {\n  console.warn('FullCalendar VDOM already loaded');\n} else {\n  globalObj.FullCalendarVDom = {\n    Component: Component,\n    createElement: createElement,\n    render: render,\n    createRef: createRef,\n    Fragment: Fragment,\n    createContext: createContext,\n    flushToDom: flushToDom,\n    unmountComponentAtNode: unmountComponentAtNode\n  };\n} // HACKS...\n// TODO: lock version\n// TODO: link gh issues\n\n\nfunction flushToDom() {\n  var oldDebounceRendering = options.debounceRendering; // orig\n\n  var callbackQ = [];\n\n  function execCallbackSync(callback) {\n    callbackQ.push(callback);\n  }\n\n  options.debounceRendering = execCallbackSync;\n  render(createElement(FakeComponent, {}), document.createElement('div'));\n\n  while (callbackQ.length) {\n    callbackQ.shift()();\n  }\n\n  options.debounceRendering = oldDebounceRendering;\n}\n\nvar FakeComponent =\n/** @class */\nfunction (_super) {\n  __extends(FakeComponent, _super);\n\n  function FakeComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FakeComponent.prototype.render = function () {\n    return createElement('div', {});\n  };\n\n  FakeComponent.prototype.componentDidMount = function () {\n    this.setState({});\n  };\n\n  return FakeComponent;\n}(Component);\n\nfunction createContext(defaultValue) {\n  var ContextType = createContext$1(defaultValue);\n  var origProvider = ContextType.Provider;\n\n  ContextType.Provider = function () {\n    var _this = this;\n\n    var isNew = !this.getChildContext;\n    var children = origProvider.apply(this, arguments); // eslint-disable-line prefer-rest-params\n\n    if (isNew) {\n      var subs_1 = [];\n\n      this.shouldComponentUpdate = function (_props) {\n        if (_this.props.value !== _props.value) {\n          subs_1.forEach(function (c) {\n            c.context = _props.value;\n            c.forceUpdate();\n          });\n        }\n      };\n\n      this.sub = function (c) {\n        subs_1.push(c);\n        var old = c.componentWillUnmount;\n\n        c.componentWillUnmount = function () {\n          subs_1.splice(subs_1.indexOf(c), 1);\n          old && old.call(c);\n        };\n      };\n    }\n\n    return children;\n  };\n\n  return ContextType;\n}\n\nfunction unmountComponentAtNode(node) {\n  render(null, node);\n}","map":null,"metadata":{},"sourceType":"module"}