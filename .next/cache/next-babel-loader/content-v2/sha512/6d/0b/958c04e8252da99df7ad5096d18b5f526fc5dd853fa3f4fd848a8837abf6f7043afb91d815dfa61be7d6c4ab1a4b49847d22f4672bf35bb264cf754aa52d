{"ast":null,"code":"if (false) {\n  global.window = {};\n}\n\nif (typeof document === \"undefined\") {\n  global.document = {\n    querySelector: function querySelector() {}\n  };\n}\n/*!\n\n=========================================================\n* NextJS Argon Dashboard PRO - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/nextjs-argon-dashboard-pro\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n\n\nvar Chart = require(\"chart.js\"); // Only for demo purposes - return a random number to generate datasets\n\n\nvar randomScalingFactor = function randomScalingFactor() {\n  return Math.round(Math.random() * 100);\n}; //\n// Chart extension for making the bars rounded\n// Code from: https://codepen.io/jedtrow/full/ygRYgo\n//\n\n\nChart.elements.Rectangle.prototype.draw = function () {\n  var ctx = this._chart.ctx;\n  var vm = this._view;\n  var left, right, top, bottom, signX, signY, borderSkipped, radius;\n  var borderWidth = vm.borderWidth; // Set Radius Here\n  // If radius is large enough to cause drawing errors a max radius is imposed\n\n  var cornerRadius = 6;\n\n  if (!vm.horizontal) {\n    // bar\n    left = vm.x - vm.width / 2;\n    right = vm.x + vm.width / 2;\n    top = vm.y;\n    bottom = vm.base;\n    signX = 1;\n    signY = bottom > top ? 1 : -1;\n    borderSkipped = vm.borderSkipped || \"bottom\";\n  } else {\n    // horizontal bar\n    left = vm.base;\n    right = vm.x;\n    top = vm.y - vm.height / 2;\n    bottom = vm.y + vm.height / 2;\n    signX = right > left ? 1 : -1;\n    signY = 1;\n    borderSkipped = vm.borderSkipped || \"left\";\n  } // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n\n\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\n    var halfStroke = borderWidth / 2; // Adjust borderWidth when bar top position is near vm.base(zero).\n\n    var borderLeft = left + (borderSkipped !== \"left\" ? halfStroke * signX : 0);\n    var borderRight = right + (borderSkipped !== \"right\" ? -halfStroke * signX : 0);\n    var borderTop = top + (borderSkipped !== \"top\" ? halfStroke * signY : 0);\n    var borderBottom = bottom + (borderSkipped !== \"bottom\" ? -halfStroke * signY : 0); // not become a vertical line?\n\n    if (borderLeft !== borderRight) {\n      top = borderTop;\n      bottom = borderBottom;\n    } // not become a horizontal line?\n\n\n    if (borderTop !== borderBottom) {\n      left = borderLeft;\n      right = borderRight;\n    }\n  }\n\n  ctx.beginPath();\n  ctx.fillStyle = vm.backgroundColor;\n  ctx.strokeStyle = vm.borderColor;\n  ctx.lineWidth = borderWidth; // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n\n  var corners = [[left, bottom], [left, top], [right, top], [right, bottom]]; // Find first (starting) corner with fallback to 'bottom'\n\n  var borders = [\"bottom\", \"left\", \"top\", \"right\"];\n  var startCorner = borders.indexOf(borderSkipped, 0);\n\n  if (startCorner === -1) {\n    startCorner = 0;\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4];\n  } // Draw rectangle from 'startCorner'\n\n\n  var corner = cornerAt(0);\n  ctx.moveTo(corner[0], corner[1]);\n\n  for (var i = 1; i < 4; i++) {\n    corner = cornerAt(i);\n    var nextCornerId = i + 1;\n\n    if (nextCornerId === 4) {\n      nextCornerId = 0;\n    } // let nextCorner = cornerAt(nextCornerId);\n\n\n    var width = corners[2][0] - corners[1][0];\n    var height = corners[0][1] - corners[1][1];\n    var x = corners[1][0];\n    var y = corners[1][1]; // eslint-disable-next-line\n\n    var radius = cornerRadius; // Fix radius being too large\n\n    if (radius > height / 2) {\n      radius = height / 2;\n    }\n\n    if (radius > width / 2) {\n      radius = width / 2;\n    }\n\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n  }\n\n  ctx.fill();\n\n  if (borderWidth) {\n    ctx.stroke();\n  }\n};\n\nvar mode = \"light\"; //(themeMode) ? themeMode : 'light';\n\nvar fonts = {\n  base: \"Open Sans\"\n}; // Colors\n\nvar colors = {\n  gray: {\n    100: \"#f6f9fc\",\n    200: \"#e9ecef\",\n    300: \"#dee2e6\",\n    400: \"#ced4da\",\n    500: \"#adb5bd\",\n    600: \"#8898aa\",\n    700: \"#525f7f\",\n    800: \"#32325d\",\n    900: \"#212529\"\n  },\n  theme: {\n    \"default\": \"#172b4d\",\n    primary: \"#5e72e4\",\n    secondary: \"#f4f5f7\",\n    info: \"#11cdef\",\n    success: \"#2dce89\",\n    danger: \"#f5365c\",\n    warning: \"#fb6340\"\n  },\n  black: \"#12263F\",\n  white: \"#FFFFFF\",\n  transparent: \"transparent\"\n}; // Methods\n// Chart.js global options\n\nfunction chartOptions() {\n  // Options\n  var options = {\n    defaults: {\n      global: {\n        responsive: true,\n        maintainAspectRatio: false,\n        defaultColor: mode === \"dark\" ? colors.gray[700] : colors.gray[600],\n        defaultFontColor: mode === \"dark\" ? colors.gray[700] : colors.gray[600],\n        defaultFontFamily: fonts.base,\n        defaultFontSize: 13,\n        layout: {\n          padding: 0\n        },\n        legend: {\n          display: false,\n          position: \"bottom\",\n          labels: {\n            usePointStyle: true,\n            padding: 16\n          }\n        },\n        elements: {\n          point: {\n            radius: 0,\n            backgroundColor: colors.theme[\"primary\"]\n          },\n          line: {\n            tension: 0.4,\n            borderWidth: 4,\n            borderColor: colors.theme[\"primary\"],\n            backgroundColor: colors.transparent,\n            borderCapStyle: \"rounded\"\n          },\n          rectangle: {\n            backgroundColor: colors.theme[\"warning\"]\n          },\n          arc: {\n            backgroundColor: colors.theme[\"primary\"],\n            borderColor: mode === \"dark\" ? colors.gray[800] : colors.white,\n            borderWidth: 4\n          }\n        },\n        tooltips: {\n          enabled: true,\n          mode: \"index\",\n          intersect: false\n        }\n      },\n      doughnut: {\n        cutoutPercentage: 83,\n        legendCallback: function legendCallback(chart) {\n          var data = chart.data;\n          var content = \"\";\n          data.labels.forEach(function (label, index) {\n            var bgColor = data.datasets[0].backgroundColor[index];\n            content += '<span class=\"chart-legend-item\">';\n            content += '<i class=\"chart-legend-indicator\" style=\"background-color: ' + bgColor + '\"></i>';\n            content += label;\n            content += \"</span>\";\n          });\n          return content;\n        }\n      }\n    }\n  }; // yAxes\n\n  Chart.scaleService.updateScaleDefaults(\"linear\", {\n    gridLines: {\n      borderDash: [2],\n      borderDashOffset: [2],\n      color: mode === \"dark\" ? colors.gray[900] : colors.gray[300],\n      drawBorder: false,\n      drawTicks: false,\n      lineWidth: 1,\n      zeroLineWidth: 1,\n      zeroLineColor: mode === \"dark\" ? colors.gray[900] : colors.gray[300],\n      zeroLineBorderDash: [2],\n      zeroLineBorderDashOffset: [2]\n    },\n    ticks: {\n      beginAtZero: true,\n      padding: 10,\n      callback: function callback(value) {\n        if (!(value % 10)) {\n          return value;\n        }\n      }\n    }\n  }); // xAxes\n\n  Chart.scaleService.updateScaleDefaults(\"category\", {\n    gridLines: {\n      drawBorder: false,\n      drawOnChartArea: false,\n      drawTicks: false\n    },\n    ticks: {\n      padding: 20\n    }\n  });\n  return options;\n} // Parse global options\n\n\nfunction parseOptions(parent, options) {\n  for (var item in options) {\n    if (typeof options[item] !== \"object\") {\n      parent[item] = options[item];\n    } else {\n      parseOptions(parent[item], options[item]);\n    }\n  }\n} // Example 1 of Chart inside src/views/dashboards/Dashboard.js\n\n\nvar chartExample1 = {\n  options: {\n    scales: {\n      yAxes: [{\n        gridLines: {\n          color: colors.gray[700],\n          zeroLineColor: colors.gray[700]\n        },\n        ticks: {\n          callback: function callback(value) {\n            if (!(value % 10)) {\n              return \"$\" + value + \"k\";\n            }\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        label: function label(item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n\n          content += \"$\" + yLabel + \"k\";\n          return content;\n        }\n      }\n    }\n  },\n  data1: function data1(canvas) {\n    return {\n      labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      datasets: [{\n        label: \"Performance\",\n        data: [0, 20, 10, 30, 15, 40, 20, 60, 60]\n      }]\n    };\n  },\n  data2: function data2(canvas) {\n    return {\n      labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      datasets: [{\n        label: \"Performance\",\n        data: [0, 20, 5, 25, 10, 30, 15, 40, 40]\n      }]\n    };\n  }\n}; // Example 2 of Chart inside src/views/dashboards/Dashboard.js and src/views/dashboards/Alternative.js and src/views/pages/Charts.js\n\nvar chartExample2 = {\n  options: {\n    scales: {\n      yAxes: [{\n        gridLines: {\n          color: colors.gray[200],\n          zeroLineColor: colors.gray[200]\n        },\n        ticks: {\n          callback: function callback(value) {\n            if (!(value % 10)) {\n              //return '$' + value + 'k'\n              return value;\n            }\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        label: function label(item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n\n          content += yLabel;\n          return content;\n        }\n      }\n    }\n  },\n  data: {\n    labels: [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    datasets: [{\n      label: \"Sales\",\n      data: [25, 20, 30, 22, 17, 29],\n      maxBarThickness: 10\n    }]\n  }\n}; // Example 3 of Chart inside src/views/dashboards/Alternative.js and src/views/pages/Charts.js\n\nvar chartExample3 = {\n  options: {\n    scales: {\n      yAxes: [{\n        gridLines: {\n          color: colors.gray[200],\n          zeroLineColor: colors.gray[200]\n        },\n        ticks: {}\n      }]\n    }\n  },\n  data: {\n    labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    datasets: [{\n      label: \"Performance\",\n      data: [0, 20, 10, 30, 15, 40, 20, 60, 60]\n    }]\n  }\n}; // Example 4 of Chart inside src/views/pages/Charts.js\n\nvar chartExample4 = {\n  options: {\n    scales: {\n      yAxes: [{\n        gridLines: {\n          color: colors.gray[200],\n          zeroLineColor: colors.gray[200]\n        },\n        ticks: {}\n      }]\n    }\n  },\n  data: {\n    labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    datasets: [{\n      label: \"Performance\",\n      data: [10, 18, 28, 23, 28, 40, 36, 46, 52],\n      pointRadius: 10,\n      pointHoverRadius: 15,\n      showLine: false\n    }]\n  }\n}; // Example 5 of Chart inside src/views/pages/Charts.js\n\nvar chartExample5 = {\n  data: {\n    labels: [\"Danger\", \"Warning\", \"Success\", \"Primary\", \"Info\"],\n    datasets: [{\n      data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()],\n      backgroundColor: [colors.theme[\"danger\"], colors.theme[\"warning\"], colors.theme[\"success\"], colors.theme[\"primary\"], colors.theme[\"info\"]],\n      label: \"Dataset 1\"\n    }]\n  },\n  options: {\n    responsive: true,\n    legend: {\n      position: \"top\"\n    },\n    animation: {\n      animateScale: true,\n      animateRotate: true\n    }\n  }\n}; // Example 6 of Chart inside src/views/pages/Charts.js\n\nvar chartExample6 = {\n  data: {\n    labels: [\"Danger\", \"Warning\", \"Success\", \"Primary\", \"Info\"],\n    datasets: [{\n      data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()],\n      backgroundColor: [colors.theme[\"danger\"], colors.theme[\"warning\"], colors.theme[\"success\"], colors.theme[\"primary\"], colors.theme[\"info\"]],\n      label: \"Dataset 1\"\n    }]\n  },\n  options: {\n    responsive: true,\n    legend: {\n      position: \"top\"\n    },\n    animation: {\n      animateScale: true,\n      animateRotate: true\n    }\n  }\n}; // Example 7 of Chart inside src/views/pages/Charts.js\n\nvar chartExample7 = {\n  data: {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [{\n      label: \"Dataset 1\",\n      backgroundColor: colors.theme[\"danger\"],\n      data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()],\n      maxBarThickness: 10\n    }, {\n      label: \"Dataset 2\",\n      backgroundColor: colors.theme[\"primary\"],\n      data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()],\n      maxBarThickness: 10\n    }, {\n      label: \"Dataset 3\",\n      backgroundColor: colors.theme[\"success\"],\n      data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()],\n      maxBarThickness: 10\n    }]\n  },\n  options: {\n    tooltips: {\n      mode: \"index\",\n      intersect: false\n    },\n    responsive: true,\n    scales: {\n      xAxes: [{\n        stacked: true\n      }],\n      yAxes: [{\n        stacked: true\n      }]\n    }\n  }\n};\nmodule.exports = {\n  chartOptions: chartOptions,\n  // used alonside with the chartExamples variables\n  parseOptions: parseOptions,\n  // used alonside with the chartExamples variables\n  chartExample1: chartExample1,\n  // used inside src/views/dashboards/Dashboard.js\n  chartExample2: chartExample2,\n  // used inside src/views/dashboards/Dashboard.js and src/views/dashboards/Alternative.js and src/views/pages/Charts.js\n  chartExample3: chartExample3,\n  // used inside src/views/dashboards/Alternative.js and src/views/pages/Charts.js\n  chartExample4: chartExample4,\n  // used inside src/views/pages/Charts.js\n  chartExample5: chartExample5,\n  // used inside src/views/pages/Charts.js\n  chartExample6: chartExample6,\n  // used inside src/views/pages/Charts.js\n  chartExample7: chartExample7 // used inside src/views/pages/Charts.js\n\n};","map":null,"metadata":{},"sourceType":"script"}