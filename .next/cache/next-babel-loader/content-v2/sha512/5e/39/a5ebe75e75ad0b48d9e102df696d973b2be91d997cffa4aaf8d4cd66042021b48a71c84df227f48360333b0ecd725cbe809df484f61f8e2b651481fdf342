{"ast":null,"code":"import _slicedToArray from \"/home/wahyu/Documents/Code/Project Web/Website Drive-In Senja/front-repo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/wahyu/Documents/Code/Project Web/Website Drive-In Senja/front-repo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"/home/wahyu/Documents/Code/Project Web/Website Drive-In Senja/front-repo/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable */\nimport React from \"react\";\n\nfunction uniq(arr) {\n  var out = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (out.indexOf(arr[i]) === -1) {\n      out.push(arr[i]);\n    }\n  }\n\n  return out;\n}\n/* istanbul ignore next */\n\n\nfunction getClipboardData(e) {\n  if (window.clipboardData) {\n    return window.clipboardData.getData(\"Text\");\n  }\n\n  if (e.clipboardData) {\n    return e.clipboardData.getData(\"text/plain\");\n  }\n\n  return \"\";\n}\n\nfunction defaultRenderTag(props) {\n  var tag = props.tag,\n      key = props.key,\n      disabled = props.disabled,\n      onRemove = props.onRemove,\n      classNameRemove = props.classNameRemove,\n      getTagDisplayValue = props.getTagDisplayValue,\n      other = _objectWithoutProperties(props, [\"tag\", \"key\", \"disabled\", \"onRemove\", \"classNameRemove\", \"getTagDisplayValue\"]);\n\n  return /*#__PURE__*/_jsxs(\"span\", _objectSpread(_objectSpread({}, other), {}, {\n    children: [getTagDisplayValue(tag), !disabled && /*#__PURE__*/_jsx(\"a\", {\n      className: classNameRemove,\n      onClick: function onClick(e) {\n        return onRemove(key);\n      }\n    })]\n  }), key);\n}\n\nfunction defaultRenderInput(_ref) {\n  var addTag = _ref.addTag,\n      props = _objectWithoutProperties(_ref, [\"addTag\"]);\n\n  var onChange = props.onChange,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"onChange\", \"value\"]);\n\n  return /*#__PURE__*/_jsx(\"input\", _objectSpread({\n    type: \"text\",\n    onChange: onChange,\n    value: value\n  }, other));\n}\n\nfunction defaultRenderLayout(tagComponents, inputComponent) {\n  return /*#__PURE__*/_jsxs(\"span\", {\n    children: [tagComponents, inputComponent]\n  });\n}\n\nfunction defaultPasteSplit(data) {\n  return data.split(\" \").map(function (d) {\n    return d.trim();\n  });\n}\n\nvar defaultInputProps = {\n  className: \"react-tagsinput-input\",\n  placeholder: \"Add a tag\"\n};\nvar TagsInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var divElementRef = React.useRef(null);\n  var inputElementRef = React.useRef(null);\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tagState = _React$useState2[0],\n      setTagState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isFocusedState = _React$useState4[0],\n      setIsFocusedState = _React$useState4[1];\n\n  React.useEffect(function () {\n    if (hasControlledInputHook() && !inputValueHook(props)) {} else {\n      setTagState(inputValueHook(props));\n    }\n  }, [props]);\n\n  var value = props.value,\n      onChange = props.onChange,\n      tagProps = props.tagProps,\n      renderLayout = props.renderLayout,\n      renderTag = props.renderTag,\n      renderInput = props.renderInput,\n      addKeys = props.addKeys,\n      removeKeys = props.removeKeys,\n      className = props.className,\n      focusedClassName = props.focusedClassName,\n      addOnBlur = props.addOnBlur,\n      addOnPaste = props.addOnPaste,\n      inputProps = props.inputProps,\n      pasteSplit = props.pasteSplit,\n      onlyUnique = props.onlyUnique,\n      maxTags = props.maxTags,\n      validate = props.validate,\n      validationRegex = props.validationRegex,\n      disabled = props.disabled,\n      tagDisplayProp = props.tagDisplayProp,\n      inputValue = props.inputValue,\n      onChangeInput = props.onChangeInput,\n      other = _objectWithoutProperties(props, [\"value\", \"onChange\", \"tagProps\", \"renderLayout\", \"renderTag\", \"renderInput\", \"addKeys\", \"removeKeys\", \"className\", \"focusedClassName\", \"addOnBlur\", \"addOnPaste\", \"inputProps\", \"pasteSplit\", \"onlyUnique\", \"maxTags\", \"validate\", \"validationRegex\", \"disabled\", \"tagDisplayProp\", \"inputValue\", \"onChangeInput\"]);\n\n  var _getTagDisplayValueHook = function _getTagDisplayValueHook(tagInner) {\n    if (tagDisplayProp) {\n      return tagInner[tagDisplayProp];\n    }\n\n    return tagInner;\n  };\n\n  var _makeTagHook = function _makeTagHook(tagInner) {\n    if (tagDisplayProp) {\n      return _defineProperty({}, tagDisplayProp, tagInner);\n    }\n\n    return tagInner;\n  };\n\n  var _removeTagHook = function _removeTagHook(indexInner) {\n    var valueInner = value.concat([]);\n\n    if (indexInner > -1 && indexInner < valueInner.length) {\n      var changed = valueInner.splice(indexInner, 1);\n      onChange(valueInner, changed, [indexInner]);\n    }\n  };\n\n  var _clearInputHook = function _clearInputHook() {\n    if (hasControlledInputHook()) {\n      onChangeInput(\"\");\n    } else {\n      setTagState(\"\");\n    }\n  };\n\n  var _tagHook = function _tagHook() {\n    if (hasControlledInputHook()) {\n      return inputValue;\n    }\n\n    return tagState;\n  };\n\n  var _addTagsHook = function _addTagsHook(tagsInner) {\n    var onValidationReject = props.onValidationReject;\n\n    if (onlyUnique) {\n      tagsInner = uniq(tagsInner);\n      tagsInner = tagsInner.filter(function (tag) {\n        return value.every(function (currentTag) {\n          return _getTagDisplayValueHook(currentTag) !== _getTagDisplayValueHook(tag);\n        });\n      });\n    }\n\n    var rejectedTags = tagsInner.filter(function (tag) {\n      return !_validateHook(_getTagDisplayValueHook(tag));\n    });\n    tagsInner = tagsInner.filter(function (tag) {\n      return _validateHook(_getTagDisplayValueHook(tag));\n    });\n    tagsInner = tagsInner.filter(function (tag) {\n      var tagDisplayValueInner = _getTagDisplayValueHook(tag);\n\n      if (typeof tagDisplayValueInner.trim === \"function\") {\n        return tagDisplayValueInner.trim().length > 0;\n      } else {\n        return tagDisplayValueInner;\n      }\n    });\n\n    if (maxTags >= 0) {\n      var remainingLimitInner = Math.max(maxTags - value.length, 0);\n      tagsInner = tagsInner.slice(0, remainingLimitInner);\n    }\n\n    if (onValidationReject && rejectedTags.length > 0) {\n      onValidationReject(rejectedTags);\n    }\n\n    if (tagsInner.length > 0) {\n      var newValueInner = value.concat(tagsInner);\n      var indexesInner = [];\n\n      for (var i = 0; i < tagsInner.length; i++) {\n        indexesInner.push(value.length + i);\n      }\n\n      onChange(newValueInner, tagsInner, indexesInner);\n\n      _clearInputHook();\n\n      return true;\n    }\n\n    if (rejectedTags.length > 0) {\n      return false;\n    }\n\n    _clearInputHook();\n\n    return false;\n  };\n\n  var _validateHook = function _validateHook(tagInner) {\n    return validate(tagInner) && validationRegex.test(tagInner);\n  };\n\n  var _shouldPreventDefaultEventOnAddHook = function _shouldPreventDefaultEventOnAddHook(addedInner, emptyInner, keyCodeInner) {\n    if (addedInner) {\n      return true;\n    }\n\n    if (keyCodeInner === 13) {\n      return props.preventSubmit || !props.preventSubmit && !emptyInner;\n    }\n\n    return false;\n  };\n\n  var focusHook = function focusHook() {\n    if (inputElementRef.current && typeof inputElementRef.current.focus === \"function\") {\n      inputElementRef.current.focus();\n    }\n\n    handleOnFocusHook();\n  };\n\n  var blurHook = function blurHook() {\n    if (inputElementRef.current && typeof inputElementRef.current.blur === \"function\") {\n      inputElementRef.current.blur();\n    }\n\n    handleOnBlurHook();\n  };\n\n  var acceptHook = function acceptHook() {\n    var tagInner = _tagHook();\n\n    if (tagInner !== \"\") {\n      tagInner = _makeTagHook(tagInner);\n      return _addTagsHook([tagInner]);\n    }\n\n    return false;\n  };\n\n  var addTagHook = function addTagHook(tagInner) {\n    return _addTagsHook([tagInner]);\n  };\n\n  var clearInputHook = function clearInputHook() {\n    _clearInputHook();\n  };\n\n  var handlePasteHook = function handlePasteHook(e) {\n    if (!addOnPaste) {\n      return;\n    }\n\n    e.preventDefault();\n    var dataInner = getClipboardData(e);\n    var tagsInner = pasteSplit(dataInner).map(function (tagInner) {\n      return _makeTagHook(tagInner);\n    });\n\n    _addTagsHook(tagsInner);\n  };\n\n  var handleKeyDownHook = function handleKeyDownHook(e) {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    var tagInner = _tagHook();\n\n    var emptyInner = tagInner === \"\";\n    var keyCodeInner = e.keyCode;\n    var keyInner = e.key;\n    var addInner = addKeys.indexOf(keyCodeInner) !== -1 || addKeys.indexOf(keyInner) !== -1;\n    var removeInner = removeKeys.indexOf(keyCodeInner) !== -1 || removeKeys.indexOf(keyInner) !== -1;\n\n    if (addInner) {\n      var addedInner = acceptHook();\n\n      if (_shouldPreventDefaultEventOnAddHook(addedInner, emptyInner, keyCodeInner)) {\n        e.preventDefault();\n      }\n    }\n\n    if (removeInner && value.length > 0 && emptyInner) {\n      e.preventDefault();\n\n      _removeTagHook(value.length - 1);\n    }\n  };\n\n  var handleClickHook = function handleClickHook(e) {\n    if (e.target === divElementRef.current) {\n      focusHook();\n    }\n  };\n\n  var handleChangeHook = function handleChangeHook(e) {\n    var onChange = props.inputProps.onChange;\n    var tagInner = e.target.value;\n\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (hasControlledInputHook()) {\n      onChangeInput(tagInner);\n    } else {\n      setTagState(tagInner);\n    }\n  };\n\n  var handleOnFocusHook = function handleOnFocusHook(e) {\n    var onFocus = props.inputProps.onFocus;\n\n    if (onFocus) {\n      onFocus(e);\n    }\n\n    setIsFocusedState(true);\n  };\n\n  var handleOnBlurHook = function handleOnBlurHook(e) {\n    var onBlur = props.inputProps.onBlur;\n    setIsFocusedState(false);\n\n    if (e == null) {\n      return;\n    }\n\n    if (onBlur) {\n      onBlur(e);\n    }\n\n    if (addOnBlur) {\n      var tagInner = _makeTagHook(e.target.value);\n\n      _addTagsHook([tagInner]);\n    }\n  };\n\n  var handleRemoveHook = function handleRemoveHook(tagInner) {\n    _removeTagHook(tagInner);\n  };\n\n  var inputPropsHook = function inputPropsHook() {\n    // eslint-disable-next-line\n    var _props$inputProps = props.inputProps,\n        onChange = _props$inputProps.onChange,\n        onFocus = _props$inputProps.onFocus,\n        onBlur = _props$inputProps.onBlur,\n        otherInputProps = _objectWithoutProperties(_props$inputProps, [\"onChange\", \"onFocus\", \"onBlur\"]);\n\n    var propsInner = _objectSpread(_objectSpread({}, defaultInputProps), otherInputProps);\n\n    if (disabled) {\n      propsInner.disabled = true;\n    }\n\n    return propsInner;\n  };\n\n  var inputValueHook = function inputValueHook(propsInner) {\n    return propsInner.currentValue || propsInner.inputValue || \"\";\n  };\n\n  var hasControlledInputHook = function hasControlledInputHook() {\n    return typeof onChangeInput === \"function\" && typeof inputValue === \"string\";\n  };\n\n  var divClassName = className;\n\n  if (isFocusedState) {\n    divClassName = className + \" \" + focusedClassName;\n  }\n\n  var tagComponents = value.map(function (tag, index) {\n    return renderTag(_objectSpread({\n      key: index,\n      tag: tag,\n      onRemove: handleRemoveHook,\n      disabled: disabled,\n      getTagDisplayValue: _getTagDisplayValueHook\n    }, tagProps));\n  });\n  var inputComponent = renderInput(_objectSpread({\n    ref: inputElementRef,\n    value: _tagHook(),\n    onPaste: handlePasteHook,\n    onKeyDown: handleKeyDownHook,\n    onChange: handleChangeHook,\n    onFocus: handleOnFocusHook,\n    onBlur: handleOnBlurHook,\n    addTag: addTagHook\n  }, inputPropsHook()));\n  React.useImperativeHandle(ref, function () {\n    return {\n      _getDivElementRef: divElementRef.current,\n      _getInputElementRef: inputElementRef.current,\n      props: props,\n      _getTagState: tagState,\n      _getTagDisplayValue: function _getTagDisplayValue(tagInner) {\n        return _getTagDisplayValueHook(tagInner);\n      },\n      _makeTag: function _makeTag(tagInner) {\n        return _makeTagHook(tagInner);\n      },\n      _removeTag: function _removeTag(indexInner) {\n        _removeTagHook(indexInner);\n      },\n      _clearInput: function _clearInput() {\n        _clearInputHook();\n      },\n      _tag: function _tag() {\n        return _tagHook();\n      },\n      _addTags: function _addTags(tagsInner) {\n        return _addTagsHook(tagsInner);\n      },\n      _validate: function _validate(tagInner) {\n        return _validateHook(tagInner);\n      },\n      _shouldPreventDefaultEventOnAdd: function _shouldPreventDefaultEventOnAdd(addedInner, emptyInner, keyCodeInner) {\n        return _shouldPreventDefaultEventOnAddHook(addedInner, emptyInner, keyCodeInner);\n      },\n      focus: function focus() {\n        focusHook();\n      },\n      blur: function blur() {\n        blurHook();\n      },\n      accept: function accept() {\n        return acceptHook();\n      },\n      addTag: function addTag(tagInner) {\n        return addTagHook(tagInner);\n      },\n      clearInput: function clearInput() {\n        clearInputHook();\n      },\n      handlePaste: function handlePaste(e) {\n        handlePasteHook(e);\n      },\n      handleKeyDown: function handleKeyDown(e) {\n        handleKeyDownHook(e);\n      },\n      handleClick: function handleClick(e) {\n        handleClickHook(e);\n      },\n      handleChange: function handleChange(e) {\n        handleChangeHook(e);\n      },\n      handleOnFocus: function handleOnFocus(e) {\n        handleOnFocusHook(e);\n      },\n      handleOnBlur: function handleOnBlur(e) {\n        handleOnBlurHook(e);\n      },\n      handleRemove: function handleRemove(tagInner) {\n        handleRemoveHook(tagInner);\n      },\n      inputProps: function inputProps() {\n        return inputPropsHook();\n      },\n      inputValue: function inputValue(propsInner) {\n        return inputValueHook(propsInner);\n      },\n      hasControlledInput: function hasControlledInput() {\n        return hasControlledInputHook();\n      }\n    };\n  });\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: divElementRef,\n    onClick: handleClickHook,\n    className: divClassName,\n    children: renderLayout(tagComponents, inputComponent)\n  });\n});\nTagsInput.defaultProps = {\n  className: \"react-tagsinput\",\n  focusedClassName: \"react-tagsinput--focused\",\n  addKeys: [9, 13],\n  addOnBlur: false,\n  addOnPaste: false,\n  inputProps: {},\n  removeKeys: [8],\n  renderInput: defaultRenderInput,\n  renderTag: defaultRenderTag,\n  renderLayout: defaultRenderLayout,\n  pasteSplit: defaultPasteSplit,\n  tagProps: {\n    className: \"react-tagsinput-tag\",\n    classNameRemove: \"react-tagsinput-remove\"\n  },\n  onlyUnique: false,\n  maxTags: -1,\n  validate: function validate() {\n    return true;\n  },\n  validationRegex: /.*/,\n  disabled: false,\n  tagDisplayProp: null,\n  preventSubmit: true\n};\nexport default TagsInput;","map":null,"metadata":{},"sourceType":"module"}